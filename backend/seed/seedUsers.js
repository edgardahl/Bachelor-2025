/**
 * Seeder Script for Creating Employees in Stores
 *
 * This script is used to generate and register employees in different stores.
 * You can customize the number of employees per store, the names, and the store IDs.
 *
 * Usage:
 * 1. **Change the number of employees per store**: 
 *    - Modify the argument passed to `seedAllStores()`. For example, `seedAllStores(5)` will create 5 employees per store.
 *
 * 2. **Change the store IDs**: 
 *    - Update the `stores` array with the unique store IDs that you want to assign employees to.
 *    - Example: `const stores = ["store_id_1", "store_id_2", "store_id_3"];`
 *
 * 3. **Customize Employee Names**: 
 *    - Modify the `firstNames` and `lastNames` arrays to include the names you want for the employees.
 *    - Example: `const firstNames = ["Anna", "Bjørn", "Carla"];`
 *    - Example: `const lastNames = ["Pettersen", "Johansen", "Olsen"];`
 *
 * 4. **Add Qualifications**: 
 *    - Add the qualification IDs to the `qualifications` array that each employee should have.
 *    - Example: `const qualifications = ["qualification_id_1", "qualification_id_2"];`
 *
 * 5. **Change Municipalities**: 
 *    - The employees are randomly assigned a municipality from the `municipalities` array.
 *    - You can add or remove municipality IDs as needed.
 *
 * 6. **Run the script**: 
 *    - You can execute the script by running `node your_script_name.js` after customizing it.
 *
 * **Important Notes**:
 * - The email for each employee is generated by combining their first and last names along with an index (e.g., emma.hansen0@example.com).
 * - The password for each employee is set to be the same as their email.
 * - Employee availability is randomly set to either "Fleksibel" (Flexible) or "Ikke-fleksibel" (Non-flexible).
 */




process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
import fetch from "node-fetch";
import { v4 as uuidv4 } from "uuid";

// API-endpoint
const endpoint = "https://localhost:5001/api/auth/register";

// Butikker
const stores = [
  "c9b8fc79-c9a2-460e-8eeb-aa9a6917872d",
  "3b13abba-8be7-4845-9dac-7abcb01d1b23",
  "2214d00e-95e0-47fe-aa50-3ea13e8ecf7f",
  "bbf88f66-dffc-4441-ad81-7f573cc02dce",
  "fa61dd1d-e0bd-42bc-b804-756898c92962",
];

// Kvalifikasjoner
const qualifications = [
  "1c387c4b-5f0c-460b-8835-fdaf99021773",
  "27b781ba-39b5-485f-a0d5-06af0369dff2",
  "2a14071d-56a2-4670-9ccb-6b83ce47d5ba",
  "7e480201-80dc-4f3f-9163-d63a122d00d7",
  "5a038141-f9b7-4ff2-a39b-86256f28187c",
  "6ffd6457-6c8d-485d-8431-202ce027c19a",
  "9c75e29f-390c-4f14-af6c-de7d27900ec4",
  "d10bd744-55f6-479c-b8fd-e1b182a350d5",
  "caff4929-7b5c-40dd-b2c3-84ef6fec5158",
];

// Kommuner (kun IDer)
const municipalities = [
  "09281dcf-7a0f-4246-bd1c-32b7ba226c86", // Oslo
  "15ab914f-da77-4a94-9228-b52e3b805ae5", // Bergen
  "3b8e6881-0651-4f1f-a2f2-9fa04079a3b0", // Stavanger
  "72af6db6-6da4-46b7-9999-9b6524929337", // Drammen
  "1117ee63-64a6-4fa2-9f06-9728489d89f0", // Fredrikstad
  "d3cec2b0-9ff8-4aae-a4bc-4d3fadada93c", // Sogndal
  "2bbd1abf-3c99-402f-b118-152e584410cd", // Asker
  "8831b53a-be61-4b58-ac05-4e3f6008b76d", // Aurskog-Høland
  "579a8e26-daa7-4642-a0ee-974a25770e09", // Bærum
  "3ff97125-1729-4002-bf75-446e7f0aac4e", // Eidsvoll
];

// Navn
const firstNames = ["Emma", "Ola", "Nora", "Jonas", "Maja", "Henrik", "Selma", "Levi"];
const lastNames = ["Hansen", "Larsen", "Nilsen", "Johansen", "Karlsen", "Andersen"];

// Hjelpefunksjoner
const getRandom = (arr) => arr[Math.floor(Math.random() * arr.length)];
const getRandomQualifications = () =>
  [...new Set(Array.from({ length: Math.floor(Math.random() * 5) + 1 }, () => getRandom(qualifications)))];

// Seeder
const seedEmployeesForStore = async (storeId, numberOfEmployees = 10) => {
  for (let i = 0; i < numberOfEmployees; i++) {
    const first_name = getRandom(firstNames);
    const last_name = getRandom(lastNames);
    const email = `${first_name.toLowerCase()}.${last_name.toLowerCase()}${i}@example.com`;
    const phone_number = `+47 4${Math.floor(1000000 + Math.random() * 8999999)}`;
    const work_municipality_ids = [
      getRandom(municipalities),
      getRandom(municipalities),
      getRandom(municipalities),
    ]; // Assign a set of work municipalities

    const payload = {
      first_name,
      last_name,
      email,
      password: email, // same as email
      phone_number,
      availability: Math.random() > 0.5 ? "Fleksibel" : "Ikke-fleksibel",
      role: "employee",
      store_id: storeId, // Assign employees to the specific store
      municipality_id: getRandom(municipalities), // random home municipality
      work_municipality_ids, // Add work municipalities
      qualifications: getRandomQualifications(),
    };

    try {
      const res = await fetch(endpoint, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        const error = await res.json();
        console.error(`❌ Feil for ${email}:`, error);
      } else {
        const result = await res.json();
        console.log(`✅ Opprettet: ${result.user.email}`);
      }
    } catch (err) {
      console.error(`❗ Nettverksfeil for ${email}:`, err.message);
    }
  }
};

const seedAllStores = async (employeesPerStore = 10) => {
  for (const store of stores) {
    await seedEmployeesForStore(store, employeesPerStore);
  }
};

// Call the function to seed all stores with a specific number of employees
seedAllStores(5); // 5 employees per store
