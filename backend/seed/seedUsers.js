/**
 * Seeder Script for Creating Employees in Stores
 *
 * This script is used to generate and register employees in different stores.
 * You can customize the number of employees per store, the names, and the store IDs.
 *
 * Usage:
 * 1. **Change the number of employees per store**: 
 *    - Modify the argument passed to `seedAllStores()`. For example, `seedAllStores(5)` will create 5 employees per store.
 *
 * 2. **Change the store IDs**: 
 *    - Update the `stores` array with the unique store IDs that you want to assign employees to.
 *    - Example: `const stores = ["store_id_1", "store_id_2", "store_id_3"];`
 *
 * 3. **Customize Employee Names**: 
 *    - Modify the `firstNames` and `lastNames` arrays to include the names you want for the employees.
 *    - Example: `const firstNames = ["Anna", "Bjørn", "Carla"];`
 *    - Example: `const lastNames = ["Pettersen", "Johansen", "Olsen"];`
 *
 * 4. **Add Qualifications**: 
 *    - Add the qualification IDs to the `qualifications` array that each employee should have.
 *    - Example: `const qualifications = ["qualification_id_1", "qualification_id_2"];`
 *
 * 5. **Change Municipalities**: 
 *    - The employees are randomly assigned a municipality from the `municipalities` array.
 *    - You can add or remove municipality IDs as needed.
 *
 * 6. **Run the script**: 
 *    - You can execute the script by running `node your_script_name.js` after customizing it.
 *
 * **Important Notes**:
 * - The email for each employee is generated by combining their first and last names along with an index (e.g., emma.hansen0@example.com).
 * - The password for each employee is set to be the same as their email.
 * - Employee availability is randomly set to either "Fleksibel" (Flexible) or "Ikke-fleksibel" (Non-flexible).
 */




process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
import fetch from "node-fetch";
import { v4 as uuidv4 } from "uuid";

// API-endpoint
const endpoint = "http://localhost:5001/api/auth/employee/register";

// Butikker
const stores = [
  "8505fa67-d150-4bb5-9a2c-19dc5dbfae9b",
"4c2a0510-4874-4a88-8945-2164cb42df63",
"c809e8ab-f5b6-4ec7-94d3-5fdae9f889a8",
"21cb7817-c377-47ff-b5d6-e2bd43c8b2f2",
"01033bfc-e97f-4b10-972d-d1f11b7619de",
"8152543c-e102-4186-b1b7-6ec7ffca92b1",
"a47d7c98-873a-4020-8852-6fecf4c43e77",
"33c72926-a81a-41ab-87a8-4a597e6ccdf2",
"c6a222e8-16f7-42b6-872d-c54db6a513db",
"27503e1c-508f-44b1-9748-af644889704b",
"553c5bad-1d55-4e45-9649-51f760280e30",
"7d3de769-b84c-4331-bff8-823bfeff5812",
"1fb8f239-8d0e-431c-a27b-f2436cc3a804",
"bb501e1c-a4d8-4eea-9610-2170b3de1067",
"9746a70a-f9ec-481f-9e1c-2a6d6d751248",
"e7f02bb6-1fed-4ebe-b779-2a24cb337016",
"f412a629-ad22-489e-8bcb-090eff61ae23",
"fdda6a2e-5473-4db7-98ae-a0667b58f036",
"87243282-4ecc-4660-99a7-88a2ad9738b8",
"d9066028-2628-4534-b26f-1055b2878d5b",
"9999df5d-0e6c-48e9-9a97-635b02c34d4e",
"523f361f-a4c2-4785-a49b-b80d5b67884e",
"d31e6bd5-b606-4fcd-86a6-b6783623a066",
"ff590ec8-88b6-4a3d-84c9-d33f6c2a7580",
"a5287e9c-7321-4fc7-a1e1-150df936e58b",
"2c10e28d-05a5-4c5f-865c-0163b8786a01",
"dccab746-6772-4086-b943-e8fad40d3ac0",
"ebebd3bb-b09e-4cc1-9acc-9c8dae8a00c4",
"90d42702-3fbb-4279-a5bc-1eef1747d806"
];

// Kvalifikasjoner
const qualifications = [
  "1c387c4b-5f0c-460b-8835-fdaf99021773",
"27b781ba-39b5-485f-a0d5-06af0369dff2",
"2a14071d-56a2-4670-9ccb-6b83ce47d5ba",
"7e480201-80dc-4f3f-9163-d63a122d00d7",
"5a038141-f9b7-4ff2-a39b-86256f28187c",
"6ffd6457-6c8d-485d-8431-202ce027c19a",
"9c75e29f-390c-4f14-af6c-de7d27900ec4",
"d10bd744-55f6-479c-b8fd-e1b182a350d5",
"caff4929-7b5c-40dd-b2c3-84ef6fec5158"
];

// Kommuner (kun IDer)
const municipalities = [
  "2bbd1abf-3c99-402f-b118-152e584410cd",
"92d7fbd2-cd34-443c-9b84-8168df8d5b9a",
"42b5388a-cc2a-4989-9554-8650d0af3d8d",
"233b1e19-ce11-4046-995c-5a5c51095f40",
"09281dcf-7a0f-4246-bd1c-32b7ba226c86",
"c0eb3e7d-3da4-453e-b1f8-bd5d6f0ccda0",
"42e36663-17a3-42f4-a3d0-002a6b8a64c9",
"c13e20bb-2260-4045-ba78-388b6797e7d1",
"3d428b00-7445-4611-857b-cb6df80f1830",
"5addc887-8fd2-4ce6-9139-d00e54f4e57a",
"1117ee63-64a6-4fa2-9f06-9728489d89f0",
"89ee70eb-a080-4f09-8e2a-d67be1fee65a",
"4c97a64a-5dcd-4c61-aafa-78023384326f",
"72af6db6-6da4-46b7-9999-9b6524929337",
"163ac50b-091f-41cb-ad72-4ce8642f2960"
];  


// Navn
const firstNames = [
  "Emma", "Ola", "Nora", "Jonas", "Maja", "Henrik", "Selma", "Levi",
  "Isak", "Linnea", "Jakob", "Thea", "Aksel", "Ingrid", "Emil", "Sofie",
  "Elias", "Tiril", "Noah", "Amalie", "Filip", "Aurora", "Tobias", "Hedda",
  "Ludvig", "Victoria", "Sander", "Ida", "Mathias", "Frida", "Reidar", "Sondre", "Petter",
  "Sofie", "Andreas", "Hanna", "Marius", "Celine", "Magnus", "Miriam", "Lucas", "Vilde", "Simon",
  "Kine", "Alexander", "Pia", "Astri", "Kristian", "Kasper", "Martine", "Oline", "Sigrid", "Sebastian", "Edgar"
];

const lastNames = [
  "Hansen", "Larsen", "Nilsen", "Johansen", "Karlsen", "Andersen",
  "Berg", "Olsen", "Solberg", "Kristiansen", "Lie", "Halvorsen",
  "Moe", "Nguyen", "Eriksen", "Strand", "Fredriksen", "Svendsen",
  "Paulsen", "Myhre", "Andreassen", "Haugen", "Eliassen", "Bakke", "Ranheim", "Brandt", "Furuli",
  "Bjerke", "Haugland", "Lunde", "Johannessen", "Stenseth", "Aune", "Sivertsen", "Tangen", "Bergheim", "Vold",
  "Ohnstad", "Karlsrud", "Kallestad", "Fossum", "Tveit", "Gulbrandsen", "Tonnesen", "Grimstad", "Sonstebo", "Dahl"
];



// Hjelpefunksjoner
const getRandom = (arr) => arr[Math.floor(Math.random() * arr.length)];
const getRandomQualifications = () =>
  [...new Set(Array.from({ length: Math.floor(Math.random() * 5) + 1 }, () => getRandom(qualifications)))];

// Seeder
const seedEmployeesForStore = async (storeId, numberOfEmployees = 10) => {
  for (let i = 0; i < numberOfEmployees; i++) {
    const first_name = getRandom(firstNames);
    const last_name = getRandom(lastNames);
    const email = `${first_name.toLowerCase()}.${last_name.toLowerCase()}${i}@coop.com`;
    const phone_number = `+47 4${Math.floor(1000000 + Math.random() * 8999999)}`;
    const work_municipality_ids = [
      getRandom(municipalities),
      getRandom(municipalities),
      getRandom(municipalities),
    ]; // Assign a set of work municipalities

    const payload = {
      first_name,
      last_name,
      email,
      password: email, // same as email
      phone_number,
      availability: Math.random() > 0.5 ? "Fleksibel" : "Ikke-fleksibel",
      role: "employee",
      store_id: storeId, // Assign employees to the specific store
      municipality_id: getRandom(municipalities), // random home municipality
      work_municipality_ids, // Add work municipalities
      qualifications: getRandomQualifications(),
    };

    try {
      const res = await fetch(endpoint, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        const error = await res.json();
        console.error(`❌ Feil for ${email}:`, error);
      } else {
        const result = await res.json();
        console.log(`✅ Opprettet: ${result.user.email}`);
      }
    } catch (err) {
      console.error(`❗ Nettverksfeil for ${email}:`, err.message);
    }
  }
};

const seedAllStores = async (employeesPerStore = 10) => {
  for (const store of stores) {
    await seedEmployeesForStore(store, employeesPerStore);
  }
};

// Call the function to seed all stores with a specific number of employees
seedAllStores(8); // 5 employees per store



